{"html":"<h1 id=\"-angular-js-\">الدليل الكامل لتعلم Angular JS في يوم واحد</h1>\n<p><em>هذه ترجمة (بتصرف) <a href=\"http://toddmotto.com/ultimate-guide-to-learning-angular-js-in-one-day/\">لمقالة Todd Motto على مدوّنته</a> وإليه يعود ضمير المتكلم في المقالة. نُشرت للمرة الأولى على <a href=\"http://www.webtuts.me/ultimate-guide-to-learning-angular-js-in-one-day/\">مدوّنة دروس الويب</a>، وأعيدُ نشرها هنا.</em></p>\n<p><span class='media-container'> <img src='content/images/AngularJS-medium.png' title='null' text='شعار Angular JS'/> </span></p>\n<h2 id=\"-angularjs-\">ما هو AngularJS؟</h2>\n<p>هو إطار عمل JavaScript لطرف العميل يتبع بنية Model-View-Controller/Model-View-View-Model، ويعتبر اليوم مهماً لبناء تطبيقات ويب وحيدة الصفحة (SAP) أو حتى المواقع العادية. يُعتبر Angular JS قفزة كبيرة نحو مستقبل HTML وما يجلبه الإصدار الخامس منها (مع التطورات على صعيد JavaScript بالطبع!)، ويبعث الحياة من جديد في تعاملنا مع الويب الحديث. هذا المقال جولة شاملة في Angular JS مستخلصة من تجاربي ونصائح وممارسات تعلمتها خلال استخدامي.</p>\n<h2 id=\"-\">المصطلحات</h2>\n<p>ليس عليك أن تبذل جهداً كبيراً لتعلم Angular، وأهم ما يجب معرفته معاني المصطلحات وتبني طريقة MVC، وMVC اختصار لـ<em>Model-View-Controller</em>، أي <em>نموذج-طريقة عرض-مُتحكِّم</em>. فيما يلي بعض المصطلحات والواجهات البرمجية الأساسية التي تزوّدنا بها Angular.</p>\n<h3 id=\"mvc\">MVC</h3>\n<p>ربما سمعت بهذا الاختصار من قبل، وهو مستخدم في لغات برمجة عديدة كوسيلة لبناء هيكل التطبيقات أو البرامج. وهاك تلخيص سريع لمعناه:</p>\n<ul>\n<li><em>النموذج</em> (<em>Model</em>): بنية البيانات التي تقوم عليها أجزاء التطبيقات، غالباً ما تمثل بصيغة JSON. يفضل أن تكون لديك معرفة مسبقة بـJSON قبل تعلم Angular، لأنها ضرورية للتواصل بين الخادم وطريقة العرض (سنأتي على شرحها في النقطة التالية). على سبيل المثال، لنفترض أن لدينا مجموعة من المستخدمين، يمكن تمثيل <em>بيانات تعريفهم</em> كما يلي:</li>\n</ul>\n<pre lang='en'>        {\n        &quot;<span class=\"hljs-attribute\">users</span>&quot; : <span class=\"hljs-value\">[{\n            &quot;<span class=\"hljs-attribute\">name</span>&quot;: <span class=\"hljs-value\"><span class=\"hljs-string\">&quot;&#x623;&#x62D;&#x645;&#x62F;&quot;</span></span>,\n            &quot;<span class=\"hljs-attribute\">id</span>&quot;: <span class=\"hljs-value\"><span class=\"hljs-string\">&quot;82047392&quot;</span>\n          </span>},{\n            &quot;<span class=\"hljs-attribute\">name</span>&quot;: <span class=\"hljs-value\"><span class=\"hljs-string\">&quot;&#x633;&#x627;&#x645;&#x631;&quot;</span></span>,\n            &quot;<span class=\"hljs-attribute\">id</span>&quot;: <span class=\"hljs-value\"><span class=\"hljs-string\">&quot;65198013&quot;</span>\n          </span>}]\n        </span>}\n`</pre><p>عادة تُجلب هذه المعلومات من خادم بطلب <code dir='ltr'>XMLHttpRequest</code>، ويقابله في jQuery الإجراء <code dir='ltr'>$.ajax</code>، وفي Angular الكائن <code dir='ltr'>$http</code>. وقد تكون هذه المعلومات مكتوبة ضمن النص البرمجي أثناء تفسير الصفحة (من قاعدة بيانات أو مخزن بيانات). بعد ذلك يكون بإمكانك تعديل هذه المعلومات وإعادة إرسالها.</p>\n<ul>\n<li><em>طريقة العرض</em> (<em>View</em>): وهو أمر سهل التفسير، فهي ببساطة المُخرج النهائي أو صفحة HTML التي تعرض البيانات (النموذج) على المستخدم مثلاً. باستخدام إطار عمل MVC، تُجلب البيانات من النموذج وتُعرض المعلومات المناسبة في صفحة HTML.</li>\n<li><em>المُتحكِّم</em> (<em>Controller</em>): وله من اسمه نصيب، فهو يتحكم بالأشياء! ولكن أية أشياء؟ البيانات. المُتحكمات هي الطريقة التي تصل من خلالها بين <em>الخادم</em> و<em>طريقة العرض</em>، فتسمح بتحديث البيانات سريعاً من خلال التواصل مع كلا الخادم والعميل.</li>\n</ul>\n<h2 id=\"-angular-js-\">إعداد مشروع Angular JS (الأساسيات)</h2>\n<p>يجب أولاً تهيئة الأساسيات التي يقوم عليها مشروعنا. يجب أن نبدأ بتطبيق (<code dir='ltr'>ng-app</code>) الذي يُعرِّف التطبيق (و<code dir='ltr'>ng</code> هي بادئة تعني Angular وتسبق عادة كل مكونات Angular JS)، ثم متحكم (Controller) ليتواصل مع طريقة العرض، ثم ربط DOM ولا ننسى تضمين Angular بالطبع! إليك الأساسيات:</p>\n<h2 id=\"-html-ng-\">نص HTML مع تصريحات <code dir='ltr'>ng-*</code>:</h2>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-app</span>=<span class=\"hljs-value\">&quot;myApp&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;MainCtrl&quot;</span>&gt;</span>\n    <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">&lt;!-- &#x645;&#x62D;&#x62A;&#x648;&#x64A;&#x627;&#x62A; &#x627;&#x644;&#x645;&#x62A;&#x62D;&#x643;&#x645; --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre><h3 id=\"-angular-\">وحدة Angular مع متحكم:</h3>\n<pre lang='en'><span class=\"hljs-keyword\">var</span> myApp = angular.module(<span class=\"hljs-string\">&apos;myApp&apos;</span>, []);\n\nmyApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n  <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x623;&#x648;&#x627;&#x645;&#x631; &#x627;&#x644;&#x645;&#x62A;&#x62D;&#x643;&#x645;</span>\n}]);</pre><p>قبل أن نستبق الأمور، نحتاج لإنشاء <em>وحدة Angular</em> (أو <em>Angular module</em>)، التي ستتضمن كل النص البرمجي المتعلق بالمشروع. هناك أكثر من طريقة للتصريح عن الوحدات، إحداها سَلسلة كل النص البرمجي معاً (لا أفضل هذه الطريقة):</p>\n<pre lang='en'>angular.module(<span class=\"hljs-string\">&apos;myApp&apos;</span>, [])\n       .controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{...}])\n       .controller(<span class=\"hljs-string\">&apos;NavCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{...}])\n       .controller(<span class=\"hljs-string\">&apos;UserCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{...}]);</pre><p>ولكن الطريقة التي أفضلها، والتي أثبتت أنها الأفضل لكل مشاريع Angular التي صمّمتها هي تعريف الوحدة العامة بشكل منفصل. الطريقة التي تعتمد على تسلسل التصريحات قد تجعلك تنسى إغلاق بعض الأقواس وتجعل قراءة النص البرمجي وتصحيحه أكثر تعقيداً. لذا أُفضّل هذا الأسلوب:</p>\n<pre lang='en'><span class=\"hljs-keyword\">var</span> myApp = angular.module(<span class=\"hljs-string\">&apos;myApp&apos;</span>, []);\nmyApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{...}]);\nmyApp.controller(<span class=\"hljs-string\">&apos;NavCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{...}]);\nmyApp.controller(<span class=\"hljs-string\">&apos;UserCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{...}]);</pre><p>بهذه الطريقة أُقسّم النص البرمجي على عدة ملفات، وفي كل ملف أربط مكوّناً من المكونات مع فضاء الأسماء myApp فيصبح تلقائياً جزءاً من تطبيقي. نعم، الأمر كما فهمت، أفضل أن أنشئ ملفاً مستقلاً لكل متحكم ومُرشِد (directive) ومعمل (factory) وأي شيء آخر (ستشكرني على هذا!). فيما بعد يمكنك دمجها معاً وتقليصها لتصبح ملفاً واحدًا (مستخدماً مدير مهام مثل Grunt أو Gulp) فتدفعَه إلى <code dir='ltr'>DOM</code>.</p>\n<h3 id=\"-controllers-\">المُتحكّمات (Controllers)</h3>\n<p>أصبحت تعرف الآن مفهوم MVC وتعلمت طريقة إعداد مشروع جديد، فلنطّلع الآن على الكيفية التي يُطبِّق فيها Angular JS العمل بالمتحكّمات.\nبناء على المثال السابق، بإمكاننا الآن أن نخطو خطوة بسيطة نحو عرض بعض البيانات ضمن طريقة العرض مستخدمين متحكّماً. يستخدم Angular تركيب <em>&quot;مقود الدراجة (handlebars)&quot;</em> لقولبة HTML. ببساطة يعني هذا أن بإمكان المتحكمات أن تعرض البيانات في صفحة HTML بأن تستبدل كل عبارة فيها مكتوبة ضمن الأقواس المزدوجة هكذا: <code dir='ltr'>{{ data }}</code> قيمة يُعينها المتحكم. في الحالة المثالية يجب أن لا تحوي صفحة HTML نصاً حقيقيًا أو قيماً مدرجة مسبقاً، ويجب أن تترك هذه المهمة لمتحكمات Angular. فيما يلي مثال يبيّن كيف يمكن عرض نص أو سلسلة حروف <code dir='ltr'>String</code> بسيطة ضمن الصفحة:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-app</span>=<span class=\"hljs-value\">&quot;myApp&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;MainCtrl&quot;</span>&gt;</span>\n    {{ text }}\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre><p>في ملف JavaScript:</p>\n<pre lang='en'><span class=\"hljs-keyword\">var</span> myApp = angular.module(<span class=\"hljs-string\">&apos;myApp&apos;</span>, []);\n\nmyApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n\n  $scope.text = <span class=\"hljs-string\">&apos;&#x645;&#x631;&#x62D;&#x628;&#x627;&#x64B; &#x628;&#x645;&#x639;&#x62C;&#x628;&#x64A; Angular!&apos;</span>;\n\n}]);</pre><p>والناتج النهائي:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/mN7QB/light/\">رابط المثال</a></p>\n<p>أهم مفهوم هنا مفهوم النطاق (<code dir='ltr'>$scope</code>) والذي ستربطه بكل الوظائف ضمن متُحكّم مُعيّن. يُشير <code dir='ltr'>$scope</code> إلى العنصر أو المنطقة الحالية في DOM (فهو لا يساوي <code dir='ltr'>this</code> ضمن النص البرمجي) وبهذا يخلق نطاقاً يحيط بكل البيانات والوظائف ضمن العناصر (DOM elements)، ويعزلها عن العناصر الأخرى، فيبدو وكأنه ينقل مجالات JavaScript العامة/الخاصة إلى DOM، وهذا شيء رائع!\nقد يبدو مفهوم النطاق مخيفاً للوهلة الأولى، لكنه طريقك الواصل بين الخادم (أو حتى البيانات المحلية) من جهة وDOM من الجهة الأخرى. يعطيك هذا المثال فكرة عن الطريقة التي &quot;تُدفع&quot; بها البيانات إلى DOM.</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/425KU/light/\">رابط المثال</a></p>\n<p>لنٌلقِ نظرة على بيانات حقيقية نفترض أننا جلبناها من خادم لنعرض تفاصيل تسجيل دخول المستخدم، سنكتفي في هذه المرحلة باستخدام بيانات جاهزة، وسنتعلم كيفية جلبها من الخادم على هيئة JSON لاحقاً.\nأولاً سنكتب نص JavaScript:</p>\n<pre lang='en'><span class=\"hljs-keyword\">var</span> myApp = angular.module(<span class=\"hljs-string\">&apos;myApp&apos;</span>, []);\n\nmyApp.controller(<span class=\"hljs-string\">&apos;UserCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x644;&#x646;&#x62C;&#x639;&#x644; &#x645;&#x639;&#x644;&#x648;&#x645;&#x627;&#x62A; &#x627;&#x644;&#x645;&#x633;&#x62A;&#x62E;&#x62F;&#x645; &#x636;&#x645;&#x646; &#x639;&#x646;&#x635;&#x631; &#x641;&#x631;&#x639;&#x64A;</span>\n  $scope.user = {};\n  $scope.user.details = {\n    <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;Todd Motto&quot;</span>,\n    <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;89101112&quot;</span>\n  };\n\n}]);</pre><p>ثم ننتقل إلى DOM لعرض هذه البيانات:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-app</span>=<span class=\"hljs-value\">&quot;myApp&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;UserCtrl&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;username&quot;</span>&gt;</span>Welcome, {{ user.details.username }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;id&quot;</span>&gt;</span>User ID: {{ user.details.id }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre><p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/425KU/light/\">رابط المثال</a></p>\n<p>من المهمّ أن تتذكر أن المتحكمات تستخدم فقط <em>للبيانات</em> ولإنشاء وظائف تتواصل مع الخادم وتجلب أو ترسل بيانات JSON. لا تستخدم المتحكمات لمعالجة DOM (كأن تنقل عنصراً ضمن الصفحة أو تخفيه أو تظهره...)، فمعالجة DOM مهمة المُرشِدات (directives)، وهي ما سنشرحه لاحقاً، المهم أن تتذكر أن موضع jQuery وغيرها من المكتبات التي تتعامل مع DOM ليس ضمن المتحكّمات.</p>\n<p>نصيحة من محترف: خلال اطلاعك على وثائق Angular الرسمية، ستلاحظ أن الأمثلة المقدمة تعتمد الأسلوب التالي لإنشاء المتحكمات:</p>\n<pre lang='en'><span class=\"hljs-keyword\">var</span> myApp = angular.module(<span class=\"hljs-string\">&apos;myApp&apos;</span>, []);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MainCtrl</span> <span class=\"hljs-params\">($scope)</span> </span>{\n  <span class=\"hljs-comment\" dir=\"ltr\">//...</span>\n};</pre><p>لا تفعل هذا! هذا سيجعل كل الوظائف المُصرّحة تابعةً للنطاق العامّ (global scope) ولا يربطها بشكل جيد مع التطبيق. هذا يعني كذلك أن عمليات التقليص للنص البرمجي والتجارب ستكون أكثر صعوبة. لا تلوّث فضاء الاسماء العام، بل اجعل المتحكمات <em>ضمن</em> التطبيق.</p>\n<h3 id=\"-directives-\">المُرشِدات (Directives)</h3>\n<p>الُمرشد في أبسط صوره هو نص HTML مٌقولَب، يفضل أن يكون استخدامه متكررًا ضمن التطبيق. توفر المرشدات طريقة سهلة لإدخال أجزاء DOM ضمن التطبيق دون عناء. تعلم استخدام المرشدات ليس أمراً سهلاً على الإطلاق، وإتقانها يتطلب جهداً، ولكن الفقرات التالية ستضعك على بداية الطريق.</p>\n<p>إذن، ما فائدة المرشدات؟ إنها مفيدة في عدة أمور، منها إنشاء عناصر DOM، مثل علامات التبويب (tabs) وقوائم التصفح - ففائدتها تعتمد على ما يفعله تطبيقك في الواجهة. لتسهيل الشرح، سأقول ببساطة: إن كنت استعملت <code dir='ltr'>ng-show</code> و<code dir='ltr'>ng-hide</code> من قبل، فقد استعملت المرشدات (حتى وإن كان هذان لا يُدرجان أية عناصر DOM).\nعلى سبيل التمرين، سنُنشئ نوعاً خاصًّا من الأزرار ونسميه <em><code dir='ltr'>customButton</code></em>، يُدرج هذا العنصر بعض العناصر الفرعية التي لا نريد كتابتها في كل مرة. تتنوع طرق التصريح عن المرشدات في DOM، وهي مبينة في النص البرمجي التالي:</p>\n<pre lang='en'><span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">&lt;!-- 1: &#x62A;&#x635;&#x631;&#x64A;&#x62D; &#x639;&#x646; &#x645;&#x64F;&#x631;&#x634;&#x62F; &#x643;&#x62E;&#x627;&#x635;&#x651;&#x629; (attribute) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">custom-button</span>&gt;</span>&#x627;&#x646;&#x642;&#x631;&#x646;&#x64A;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n\n<span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">&lt;!-- 2: &#x643;&#x639;&#x646;&#x635;&#x631; &#x645;&#x62E;&#x635;&#x635; (custom elements) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">custom-button</span>&gt;</span>&#x627;&#x646;&#x642;&#x631;&#x646;&#x64A;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">custom-button</span>&gt;</span>\n\n<span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">&lt;!-- 3: &#x643;&#x635;&#x646;&#x641; (class) (&#x644;&#x644;&#x62A;&#x648;&#x627;&#x641;&#x642; &#x645;&#x639; &#x627;&#x644;&#x646;&#x633;&#x62E; &#x627;&#x644;&#x642;&#x62F;&#x64A;&#x645;&#x629; &#x645;&#x646; IE) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;custom-button&quot;</span>&gt;</span>&#x627;&#x646;&#x642;&#x631;&#x646;&#x64A;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n\n<span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">&lt;!-- 4: &#x643;&#x62A;&#x639;&#x644;&#x64A;&#x642; (comment) (&#x644;&#x64A;&#x633; &#x645;&#x644;&#x627;&#x626;&#x645;&#x627;&#x64B; &#x644;&#x647;&#x630;&#x627; &#x627;&#x644;&#x62A;&#x645;&#x631;&#x64A;&#x646;) --&gt;</span>\n<span class=\"hljs-comment\" dir=\"ltr\">&lt;!-- directive: custom-button --&gt;</span></pre><p>أفضّل استخدام المرشدات كخواصّ (attributes)، أما العناصر المخصصة (custom elements) فقادمة في النسخ المستقبلية من HTML باسم Web Components، يوفر Angular ما يشبهها، ولكنها قد تنطوي على بعض العيوب والعلل في المتصفحات القديمة.\nالآن نعرف كيف نصرح عن المرشدات ضمن الصفحة، سننتقل إلى إنشائها ضمن JavaScript. لاحظ أنني سأربطه مع فضاء الأسماء العام myApp؛ في صيغته الأبسط يُكتب المرشد كما يلي:</p>\n<pre lang='en'>myApp.directive(<span class=\"hljs-string\">&apos;customButton&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    link: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(scope, element, attrs)</span> </span>{\n      <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x647;&#x646;&#x627; &#x627;&#x643;&#x62A;&#x628; &#x627;&#x644;&#x62A;&#x639;&#x644;&#x64A;&#x645;&#x627;&#x62A; &#x627;&#x644;&#x62A;&#x64A; &#x62A;&#x639;&#x627;&#x644;&#x62C; DOM &#x623;&#x648; &#x62A;&#x62A;&#x639;&#x627;&#x645;&#x644; &#x645;&#x639; &#x623;&#x62D;&#x62F;&#x627;&#x62B;&#x647;</span>\n    }\n  };\n});</pre><p>عرّفنا المرشد باستخدام الطريقة <em><code dir='ltr'>.directive()</code></em>، مُرسلين إليها اسم المرشد <code dir='ltr'>&#39;customButton&#39;</code>. عندما تكتب حرفاً كبيراً بالإنكليزية في اسم المُرشد، فإنه ينبغي استخدام اسم المرشد ضمن DOM بصيغته التي يُفصل بها باستخدام الشرطة (-) بين الحروف الكبيرة (كما في المثال السابق: استخدمنا <code dir='ltr'>&#39;customElement&#39;</code> في JavaScript و<code dir='ltr'>&quot;custom-button&quot;</code> في HTML).\nيُرجع المُرشد كائناً (Object) له عدد من الخصائص. أهم ما يجب تعلّمه منها: <code dir='ltr'>restrict</code> و<code dir='ltr'>replace</code> و<code dir='ltr'>transclude</code> و<code dir='ltr'>template</code> و<code dir='ltr'>templateUrl</code> وأخيراً <code dir='ltr'>link</code>. لنضف بعضها إلى نصنا البرمجي:</p>\n<pre lang='en'>myApp.directive(<span class=\"hljs-string\">&apos;customButton&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    restrict: <span class=\"hljs-string\">&apos;A&apos;</span>,\n    replace: <span class=\"hljs-literal\">true</span>,\n    transclude: <span class=\"hljs-literal\">true</span>,\n    template: <span class=\"hljs-string\">&apos;&lt;a href=&quot;&quot; class=&quot;myawesomebutton&quot; ng-transclude&gt;&apos;</span> +\n                <span class=\"hljs-string\">&apos;&lt;i class=&quot;icon-ok-sign&quot;&gt;&lt;/i&gt;&apos;</span> +\n              <span class=\"hljs-string\">&apos;&lt;/a&gt;&apos;</span>,\n    link: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(scope, element, attrs)</span> </span>{\n      <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x647;&#x646;&#x627; &#x627;&#x643;&#x62A;&#x628; &#x627;&#x644;&#x62A;&#x639;&#x644;&#x64A;&#x645;&#x627;&#x62A; &#x627;&#x644;&#x62A;&#x64A; &#x62A;&#x639;&#x627;&#x644;&#x62C; DOM &#x623;&#x648; &#x62A;&#x62A;&#x639;&#x627;&#x645;&#x644; &#x645;&#x639; &#x623;&#x62D;&#x62F;&#x627;&#x62B;&#x647;</span>\n    }\n  };\n});</pre><p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/VC4H2/light/\">رابط المثال</a></p>\n<p>تأكد من فحص العنصر (من الأمر Inspect element في المتصفح) لرؤية العناصر الجديدة التي أُدخلت في الصفحة. أعلم أن الرمز لم يظهر ضمن العنصر الجديد، ببساطة لأنني لم أُضمّن Font Awesome ضمن المشروع، ولكن يمكنك فهم كيف تعمل المرشدات. لنتعرف الآن ما تعنيه كل واحدة من خصائص المرشد السابقة الذكر:</p>\n<ul>\n<li>الخاصة <em><code dir='ltr'>restrict</code></em>: تُقيّد هذه الخاصة كيفية استخدام المُرشد، كيف نريد أن نستخدمه؟ إن كنت تبني مشروعاً يتطلب دعم النسخ القديمة من IE، فعليك استخدامه كخاصّة (attribute) أو صنف (class). القيمة <code dir='ltr'>&#39;A&#39;</code> تعني حصر استخدام المرشد بالخواص (attributes) فقط. <code dir='ltr'>&#39;E&#39;</code> تعني Element و<code dir='ltr'>&#39;C&#39;</code> صنف و<code dir='ltr'>&#39;M&#39;</code> تعليق. القيمة الافتراضية هي <code dir='ltr'>&#39;EA&#39;</code> (أي عنصر وخاصة).</li>\n<li>الخاصة <em><code dir='ltr'>replace</code></em>: تعني استبدال HTML العنصر المصرّح عن المُرشد ضمن الصفحة بالقالب (template) الذي يُحدد في الخاصة <code dir='ltr'>template</code> (مشروحة أدناه).</li>\n<li>الخاصة <em>`transclude</em>`: تسمح بنسخ المحتوى الأصلي للعنصر المُصرّح عن المُرشد في الصفحة ودمجه ضمن المرشد (عند التنفيذ، ستلاحظ أن العبارة &quot;انقرني&quot; انتقلت إلى المُرشد).</li>\n<li>الخاصة <em><code dir='ltr'>template</code></em>: قالب (كذلك المستخدم في المثال) يُدخل إلى الصفحة. يفضّل استخدام القوالب الصغيرة فقط. تُعالج القوالب وتبنى من قبل Angular مما يسمح باستخدام صيغة مقود الدراجة ضمنها.</li>\n<li><p>الخاصة <em><code dir='ltr'>templateUrl</code></em>: مشابهة للسابقة، ولكنها تُجلب من ملف أو من وسم <code dir='ltr'>&lt;script&gt;</code> بدل كتابتها ضمن تعريف المُرشد. كل ما عليك هو تعيين مسار الملف الذي يحوي القالب. يكون هذا الخيار مناسباً عندما تريد الاحتفاظ بالقوالب خارج النص البرمجي لملفات JavaScript:</p>\n<pre lang='en'>myApp.directive(<span class=\"hljs-string\">&apos;customButton&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n <span class=\"hljs-keyword\">return</span> {\n   templateUrl: <span class=\"hljs-string\">&apos;templates/customButton.html&apos;</span>\n   <span class=\"hljs-comment\" dir=\"ltr\">// directive stuff...</span>\n\n});</pre><p>وضمن الملف، نكتب:</p>\n<pre lang='en'><span class=\"hljs-comment\" dir=\"ltr\">&lt;!-- inside customButton.html --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">&quot;&quot;</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;myawesomebutton&quot;</span> <span class=\"hljs-attribute\">ng-transclude</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">i</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;icon-ok-sign&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">i</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span></pre><p>ملاحظة: يمكن أن يكون اسم الملف أي شيء وليس من الضروري أن يوافق اسمَ المُرشد.\nعند استخدام الأسلوب السابق، سيحتفظ المتصفح بنسخة مُخبأة (cached) من ملف HTML، وهو أمر رائع! الخيار البديل الذي استخدام قالب ضمن وسم <code dir='ltr'>&lt;script&gt;</code> وهنا لا تُخبأ نسخة منه في المتصفح:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">&quot;text/ng-template&quot;</span> <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-value\">&quot;customButton.html&quot;</span>&gt;</span><span class=\"javascript\">\n&lt;a href=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;myawesomebutton&quot;</span> ng-transclude&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">i</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;icon-ok-sign&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">i</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n</span></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span></pre><p>هنا أخبرنا Angular بأن وسم <code dir='ltr'>&lt;script&gt;</code> هذا هو قالب (<em><code dir='ltr'>ng-template</code></em>) وأعطيناه المُعرف. سيبحث Angular عن القالب أو عن ملف html، فاستخدم ما تراه مناسباً. شخصياً، أفضّل إنشاء ملفات html لسهولة تنظيمها ولتحسين الأداء وإبقاء DOM نظيفاً، فقد يستخدم مشروعك مع الوقت عشرات المُرشدات، وترتيبها في ملفات مستقلة يجعل مراجعتها أسهل.</p>\n</li>\n</ul>\n<h3 id=\"-services-\">الخدمات (Services)</h3>\n<p>كثيراً ما تثير الخدمات في Angular ارتباك المطورين؛ ومن خبرتي وأبحاثي، أعتقد أن الخدمات وُضعت كنمط وأسلوب للتصميم أكثر من اختلافها بالوظيفة التي تؤديها. بعد التنقيب في مصدر Angular، وجدت أنها تُعالج وتبنى باستخدام المُجمّع (compiler) ذاته، وكذلك فهي تقدم العديد من الوظائف المشابهة. أنصح باستخدام الخدمات لبناء <em>الكائنات المُتفرِّدة</em> (<em>singletons</em>)، واستخدام المعامل (Factories) لبناء وظائف أكثر تعقيداً كالكائنات الحرفيّة (Object Literals).\nفيما يلي مثال لاستخدام خدمة توجد ناتج الضرب لعددين:</p>\n<pre lang='en'>myApp.service(<span class=\"hljs-string\">&apos;Math&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.multiply = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(x, y)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> x * y;\n  };\n});</pre><p>يمكنك بعد هذا استخدامها ضمن مُتحكم كما يلي:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">12</span>;\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">24</span>;\n\n    <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x627;&#x644;&#x646;&#x627;&#x62A;&#x62C;: 288</span>\n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-built_in\">Math</span>.multiply(a, b);\n}]);</pre><p>نعم بالطبع إيجاد ناتج الضرب سهل ولا يحتاج خدمة، لكننا نستخدمه لإيصال الفكرة فحسب.\nعندما ننشئ خدمة (أو معملاً) نحتاج إلى إخبار Angular عن متطلبات هذه الخدمة، وهو ما يسمى &quot;حقن المتطلبات Dependency Injection&quot; - إن لم تُصرّح عن المتطلبات فلن يعمل المتحكم المعتمد على الخدمة، ويقع خطأ عند التجميع. ربما لاحظت الجزء <code dir='ltr'>function ($scope)</code> ضمن التصريح عن المتحكم أعلاه، وهذا هو ببساطة حقن المتطلبات! ستلاحظ أيضًا <code dir='ltr'>[$scope]</code> قبل الجزء <code dir='ltr'>function ($scope)</code>، وهو ما سأشرحه لاحقاً. فيما يلي طريقة استخدام حقن المتطلبات لإخبار Angular أنك تحتاج إلى الخدمة التي أنشأتها للتو:</p>\n<pre lang='en'><span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x645;&#x631;&#x631; &#x627;&#x644;&#x62E;&#x62F;&#x645;&#x629; Math</span>\nmyApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-string\">&apos;Math&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope, Math)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">12</span>;\n    <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">24</span>;\n\n    <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x64A;&#x64F;&#x639;&#x637;&#x64A; 288</span>\n    <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-built_in\">Math</span>.multiply(a, b);\n}]);</pre><h3 id=\"-factories-\">المعامل (Factories)</h3>\n<p>إيضاح فكرة المعامل سهل إذا كنت قد استوعبت فكرة الخدمات، بإمكاننا إنشاء كائن حرفي (Object Literal) ضمن المعمل أو طرائق أكثر تعقيداً:</p>\n<pre lang='en'><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($http)</span> </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    get: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(url)</span> </span>{\n      <span class=\"hljs-keyword\">return</span> $http.get(url);\n    },\n    post: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(url)</span> </span>{\n      <span class=\"hljs-keyword\">return</span> $http.post(url);\n    },\n  };\n}]);</pre><p>هنا أنشأت مُغلفات (wrappers) مخصصة لخدمة <code dir='ltr'>$http</code> في Angular المسؤولة عن طلبات <code dir='ltr'>XHR</code>. بعد حقن المتطلبات ضمن المتحكم يمكننا استخدام هذا المعمل بسهولة:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-string\">&apos;Server&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope, Server)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> jsonGet = <span class=\"hljs-string\">&apos;http://myserver/getURL&apos;</span>;\n    <span class=\"hljs-keyword\">var</span> jsonPost = <span class=\"hljs-string\">&apos;http://myserver/postURL&apos;</span>;\n    Server.get(jsonGet);\n    Server.post(jsonPost);\n}]);</pre><p>إذا أرت طلب التحديثات من الخادم، بإمكانك إنشاء طريقة <code dir='ltr'>Server.poll</code> أو إن كنت تستخدم مقبساً (ٍSocket)، فربما ترغب بإنشاء الطريقة <code dir='ltr'>Server.socket</code> وهكذا... المعامل تسمح لك بتنظيم نصك البرمجي ضمن وحدات يمكن إدراجها ضمن المتحكمات منعاً لتكرار النص البرمجي فيها والحاجة المتكررة لصيانته.</p>\n<h3 id=\"-\">المُرشّحات</h3>\n<p>تستخدم المرشحات مع مصفوفات (arrays) من البيانات وخارج الحلقات (loops). إن احتجت للمرور على عناصر من مصفوفة بيانات والحصول على بعض منها فقط، فأنت في المكان الصحيح! يمكنك أيضًا استخدام المرشحات لتصفية ما يكتبه المستخدم ضمن حقل إدخال <code dir='ltr'>&lt;input&gt;</code> مثلاً. هناك عدة طرق لاستخدام المرشحات: ضمن متحكم، أو كطريقة مُعرفة. فيما يلي الطريقة الأخيرة:</p>\n<pre lang='en'>myApp.filter(<span class=\"hljs-string\">&apos;reverse&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(input, uppercase)</span> </span>{\n        <span class=\"hljs-keyword\">var</span> out = <span class=\"hljs-string\">&apos;&apos;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; input.length; i++) {\n            out = input.charAt(i) + out;\n        }\n        <span class=\"hljs-keyword\">if</span> (uppercase) {\n            out = out.toUpperCase();\n        }\n        <span class=\"hljs-keyword\">return</span> out;\n    }\n});\n\n<span class=\"hljs-comment\" dir=\"ltr\">// Controller included to supply data</span>\nmyApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n    $scope.greeting = <span class=\"hljs-string\">&apos;Todd Motto&apos;</span>;\n}]);</pre><p>وفي HTML:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-app</span>=<span class=\"hljs-value\">&quot;myApp&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;MainCtrl&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>No filter: {{ greeting }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Reverse: {{ greeting | reverse }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre><p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/pmh4s/light/\">رابط المثال</a></p>\n<p>وهنا نستخدم المُرشح ضمن حلقة <code dir='ltr'>ng-repeat</code>:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">ng-repeat</span>=<span class=\"hljs-value\">&quot;number in myNumbers |filter:oddNumbers&quot;</span>&gt;</span>{{ number }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></pre><p>مثال عن مُرشح ضمن متحكم:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n\n    $scope.numbers = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">100</span>];\n\n    $scope.lowerBound = <span class=\"hljs-number\">42</span>;\n\n    <span class=\"hljs-comment\" dir=\"ltr\">// Does the Filters</span>\n    $scope.greaterThanNum = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(item)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> item &gt; $scope.lowerBound;\n    };\n\n}]);</pre><p>واستخدامه حلقة <code dir='ltr'>ng-repeat</code>:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">ng-repeat</span>=<span class=\"hljs-value\">&quot;number in numbers | filter:greaterThanNum&quot;</span>&gt;</span>\n  {{ number }}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span></pre><p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/cZbCf/light/\">رابط المثال</a></p>\n<p>كان هذا القسم الأكبر مما تحتاج لمعرفته عن AngularJS وواجهاتها البرمجية، ومع أن ما تعلمناه كافٍ لبناء تطبيق Angular، ولكننا إلى الآن لم نسكتشف أغوراها!</p>\n<h3 id=\"-\">ربط البيانات ثنائي الاتجاه</h3>\n<p>عندما سمعت للمرة الأولى عن <strong>ربط البيانات ثنائي الاتجاه</strong> لم أفهم ما يعنيه. باختصار يمكن القول إنه حلقة متصلة من البيانات المُزامنة: حدّث النموذج (Model) لتُحدَّث طريقة العرض (View)، أو حدّث طريقة العرض ليُحدَّث النموذج (Model). هذا يعني أن البيانات تبقى محدثة دوماً دون عناء. إن ربطت نموذج <code dir='ltr'>ng-model</code> مع حقل إدخال <code dir='ltr'>&lt;input&gt;</code> وكتبت فيه، فهذا يُنشئ (أو يُحدِّث) نموذجاً في الوقت ذاته.\nفيما يلي نقوم بإنشاء حقل <code dir='ltr'>&lt;input&gt;</code> ونربطه بنموذج نسميه <code dir='ltr'>myModel</code>، يمكنني الآن استخدام صياغة مقود الدراجة لعكس هذا النموذج وما يطرأ عليه من تحديثات في طريقة العرض في الوقت ذاته:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-app</span>=<span class=\"hljs-value\">&quot;myApp&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;MainCtrl&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">input</span> <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-value\">&quot;text&quot;</span> <span class=\"hljs-attribute\">ng-model</span>=<span class=\"hljs-value\">&quot;myModel&quot;</span> <span class=\"hljs-attribute\">placeholder</span>=<span class=\"hljs-value\">&quot;Start typing...&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>My model data: {{ myModel }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre><pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n    <span class=\"hljs-comment\" dir=\"ltr\">// Capture the model data</span>\n    <span class=\"hljs-comment\" dir=\"ltr\">// and/or initialise it with an existing string</span>\n    $scope.myModel = <span class=\"hljs-string\">&apos;&apos;</span>;\n}]);</pre><p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/qrr3q/light/\">link_to_demo</a></p>\n<h3 id=\"-xhr-ajax-http-json-\">طلبات <code dir='ltr'>XHR</code>/Ajax/<code dir='ltr'>$http</code> وربط <code dir='ltr'>JSON</code></h3>\n<p>نعرف الآن كيف نرسل بيانات بسيطة ضمن المجال (<code dir='ltr'>$scope</code>)، ونعرف ما يكفي عن كيفية عمل النماذج وربط البيانات ثنائي الجانب، والآن حان الوقت لمحاكاة طلبات <code dir='ltr'>XHR</code> حقيقية للخادم. ليس هذا ضرورياً لمواقع الويب العادية، لكنه مناسب جداً لجلب البيانات في تطبيقات الويب.\nعندما تطور تطبيقك على جهازك المحلي، فغالباً ما تستخدم شيئاً مثل Java أو ASP.NET أو PHP أو غيرها لتشغيل خادم محلي. وسواء كنا نتصل بقاعدة بيانات محلية أم بخادم بعيد كواجهة برمجية، فإننا نتبع نفس الخطوات بالضبط.</p>\n<p>هنا يأتي دور <code dir='ltr'>$http</code>، صديقك المخلص من اليوم فصاعداً! الطريقة <code dir='ltr'>$http</code> هي مُغلّف <code dir='ltr'>wrapper</code> تقدمه Angular للوصول إلى البيانات من الخادم، وهو سهل الاستخدام للغاية ولا يحتاج لأي خبرة. فيما يلي مثال عن طلب <code dir='ltr'>GET</code> لجلب البيانات من الخادم. الصياغة مشابهة جداً لصياغة jQuery، وهذا يُسهل الانتقال من الأخيرة إلى Angular:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-string\">&apos;$http&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope, $http)</span> </span>{\n  $http({\n    method: <span class=\"hljs-string\">&apos;GET&apos;</span>,\n    url: <span class=\"hljs-string\">&apos;//localhost:9000/someUrl&apos;</span>\n  });\n}]);</pre><p>يُعيد Angular إلينا شيئاً يُصطلح على تسميته <strong>الوعد (Promise)</strong> ، وهو بديل أسهل استخداماً من الاستدعاءات الراجعة (callbacks). يمكن تركيب الوعود في سلسلة باستخدام النقطة، ويمكننا ربطها مع مستقبلات النجاح والفشل:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n  $http({\n    method: <span class=\"hljs-string\">&apos;GET&apos;</span>,\n    url: <span class=\"hljs-string\">&apos;//localhost:9000/someUrl&apos;</span>\n  })\n  .success(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(data, status, headers, config)</span> </span>{\n    <span class=\"hljs-comment\" dir=\"ltr\">// successful data retrieval</span>\n  })\n  .error(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(data, status, headers, config)</span> </span>{\n    <span class=\"hljs-comment\" dir=\"ltr\">// something went wrong :(</span>\n  });\n}]);</pre><p>سهلة الاستخدام والقراءة. هنا نربط طريقة العرض والخادم بربط نموذج أو تحديثه. لنفترض أن لدينا خادمًا مُعدًّا ولنقم بدفع اسم المستخدم إلى طريقة العرض عن طريق طلب <code dir='ltr'>AJAX</code>.</p>\n<p>علينا --لو كنا حريصين على المثالية-- أن نصمم بيانات <code dir='ltr'>JSON</code> التي نريدها أولاً. دعونا الآن نُبسط الأمور، ولندع هذا الأمر ليتولاه من يفهم في أمور النهاية الخلفية (backend)، ولكن لنقل أننا تفترض أن نستقبل بيانات مثل هذه:</p>\n<pre lang='en'>{\n  &quot;<span class=\"hljs-attribute\">user</span>&quot;: <span class=\"hljs-value\">{\n    &quot;<span class=\"hljs-attribute\">name</span>&quot;: <span class=\"hljs-value\"><span class=\"hljs-string\">&quot;Todd Motto&quot;</span></span>,\n    &quot;<span class=\"hljs-attribute\">id</span>&quot;: <span class=\"hljs-value\"><span class=\"hljs-string\">&quot;80138731&quot;</span>\n  </span>}\n</span>}</pre><p>هذا يعني أننا سنحصل على كائن <code dir='ltr'>Object</code> من الخادم (سنسميه <code dir='ltr'>data</code>، وسترى أنه يُمرر إلى مستقبلات الوعد الذي أنشأناه).\nعلينا الآن أن نربط هذا الكائن بالخاصة <code dir='ltr'>data.user</code>، وضمنها لدينا <code dir='ltr'>name</code> و<code dir='ltr'>id</code>.\nيمكن ببساطة الوصول إلى هذه القيم باستخدام <code dir='ltr'>data.user.name</code> للحصول على &quot;Todd Motto&quot; مثلاً.</p>\n<p>فيما يلي النص البرمجي (اطلع على التعليقات المضمنة):</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;UserCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-string\">&apos;$http&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope, $http)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"ltr\">// create a user Object</span>\n  $scope.user = {};\n\n  <span class=\"hljs-comment\" dir=\"ltr\">// Initiate a model as an empty string</span>\n  $scope.user.username = <span class=\"hljs-string\">&apos;&apos;</span>;\n\n  <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x646;&#x631;&#x64A;&#x62F; &#x623;&#x646; &#x646;&#x631;&#x633;&#x644; &#x637;&#x644;&#x628;&#x627;&#x64B; &#x648;&#x646;&#x62D;&#x635;&#x644; &#x639;&#x644;&#x649; &#x627;&#x633;&#x645; &#x627;&#x644;&#x645;&#x633;&#x62A;&#x62E;&#x62F;&#x645;</span>\n  $http({\n    method: <span class=\"hljs-string\">&apos;GET&apos;</span>,\n    url: <span class=\"hljs-string\">&apos;//localhost:9000/someUrlForGettingUsername&apos;</span>\n  })\n  .success(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(data, status, headers, config)</span> </span>{\n    <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x639;&#x646;&#x62F; &#x646;&#x62C;&#x627;&#x62D; &#x627;&#x644;&#x637;&#x644;&#x628;&#x60C; &#x646;&#x64F;&#x633;&#x646;&#x650;&#x62F; &#x627;&#x644;&#x627;&#x633;&#x645; &#x625;&#x644;&#x649; &#x627;&#x644;&#x646;&#x645;&#x648;&#x630;&#x62C; &#x627;&#x644;&#x630;&#x64A; &#x623;&#x646;&#x634;&#x623;&#x646;&#x627;&#x647;</span>\n    $scope.user.username = data.user.name;\n  })\n  .error(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(data, status, headers, config)</span> </span>{\n    <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x648;&#x642;&#x639; &#x62E;&#x637;&#x623; &#x645;&#x627;! :(</span>\n  });\n}]);</pre><p>الآن ضمن الصفحة يمكننا ببساطة كتابة:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;UserCtrl&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>{{ user.username }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span></pre><p>هذا سيعرض اسم المستخدم. لننتقل الآن إلى خطوة أبعد بفهم <strong>ربط البيانات التصريحي (Declarative data-binding)</strong> حيث تصبح الأمور أكثر إثارة!</p>\n<h3 id=\"-\">ربط البيانات التصريحي</h3>\n<p>تقوم فلسفة Angular على إنشاء نصوص HTML ديناميكية قادرة على القيام بوظائف بنفسها لم نكن نتوقع أنها ممكنة ضمن المتصفح. هذه هي المهمة التي تقوم بها Angualar على خير وجه.\nلنتخيل أننا أرسلنا طلب AJAX لجلب قائمة بعناوين البريد الإلكتروني وسطر الموضوع فيها مع تاريخ إرسالها، ولنفترض أننا نريد عرضها ضمن الصفحة. في هذا المكان بالضبط تذهلنا Angular بقدراتها. لننشئ أولاً متحكماً بالبريد الإلكتروني:</p>\n<pre lang='en'>yApp.controller(<span class=\"hljs-string\">&apos;EmailsCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x646;&#x64F;&#x646;&#x634;&#x626; &#x643;&#x627;&#x626;&#x646;&#x627;&#x64B; &#x64A;&#x62F;&#x639;&#x627;&#x64B; `emails`</span>\n  $scope.emails = {};\n\n  <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x644;&#x646;&#x641;&#x62A;&#x631;&#x636; &#x623;&#x646;&#x646;&#x627; &#x62D;&#x635;&#x644;&#x646;&#x627; &#x639;&#x644;&#x649; &#x647;&#x630;&#x647; &#x627;&#x644;&#x628;&#x64A;&#x627;&#x646;&#x627;&#x62A; &#x645;&#x646; &#x627;&#x644;&#x62E;&#x627;&#x62F;&#x645;</span>\n  <span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">// &#x647;&#x630;&#x647; **&#x645;&#x635;&#x641;&#x648;&#x641;&#x629;** &#x645;&#x646; **&#x627;&#x644;&#x643;&#x627;&#x626;&#x646;&#x627;&#x62A;**</span>\n  $scope.emails.messages = [{\n        <span class=\"hljs-string\">&quot;from&quot;</span>: <span class=\"hljs-string\">&quot;Steve Jobs&quot;</span>,\n        <span class=\"hljs-string\">&quot;subject&quot;</span>: <span class=\"hljs-string\">&quot;I think I&apos;m holding my phone wrong :/&quot;</span>,\n        <span class=\"hljs-string\">&quot;sent&quot;</span>: <span class=\"hljs-string\">&quot;2013-10-01T08:05:59Z&quot;</span>\n    },{\n        <span class=\"hljs-string\">&quot;from&quot;</span>: <span class=\"hljs-string\">&quot;Ellie Goulding&quot;</span>,\n        <span class=\"hljs-string\">&quot;subject&quot;</span>: <span class=\"hljs-string\">&quot;I&apos;ve got Starry Eyes, lulz&quot;</span>,\n        <span class=\"hljs-string\">&quot;sent&quot;</span>: <span class=\"hljs-string\">&quot;2013-09-21T19:45:00Z&quot;</span>\n    },{\n        <span class=\"hljs-string\">&quot;from&quot;</span>: <span class=\"hljs-string\">&quot;Michael Stipe&quot;</span>,\n        <span class=\"hljs-string\">&quot;subject&quot;</span>: <span class=\"hljs-string\">&quot;Everybody hurts, sometimes.&quot;</span>,\n        <span class=\"hljs-string\">&quot;sent&quot;</span>: <span class=\"hljs-string\">&quot;2013-09-12T11:38:30Z&quot;</span>\n    },{\n        <span class=\"hljs-string\">&quot;from&quot;</span>: <span class=\"hljs-string\">&quot;Jeremy Clarkson&quot;</span>,\n        <span class=\"hljs-string\">&quot;subject&quot;</span>: <span class=\"hljs-string\">&quot;Think I&apos;ve found the best car... In the world&quot;</span>,\n        <span class=\"hljs-string\">&quot;sent&quot;</span>: <span class=\"hljs-string\">&quot;2013-09-03T13:15:11Z&quot;</span>\n    }];\n\n}]);</pre><p>علينا الآن دفعها ضمن الصفحة. هنا نستخدم الربط التصريحي لنُعلن عما سيفعله تطبيقنا: إنشاء أول جزء من عناصر HTML الحيوية. سنستخدم مُرشد <code dir='ltr'>ng-repeat</code> المبني ضمن Angular، والذي سوف يمر على البيانات ويعرض الناتج دون عناء الاستدعاءات الرجعية أو تغيير الحالة، بهذه السهولة:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">ng-repeat</span>=<span class=\"hljs-value\">&quot;message in emails.messages&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>From: {{ message.from }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>Subject: {{ message.subject }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>{{ message.sent | date:&apos;MMM d, y h:mm:ss a&apos; }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></pre><p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/TAVQc/light/\">رابط المثال</a></p>\n<p>قمت أيضاً باستخدام مُرشّح التاريخ لأبين لك كيف يمكن أن تعرض تواريخ UTC.</p>\n<p>اطلع على المُرشدات التي توفرها Angular لتتعرف على القدرات الكاملة للربط التصريحي. بهذا نكون قد عرفنا كيف نصل البيانات بين الخادم وطريقة العرض.</p>\n<h3 id=\"-scope-functions-\">وظائف المجال (Scope functions)</h3>\n<p>تعتبر وظائف المجال الخطوة التالية في بناء وظائف التطبيق واستكمالاً للربط التصريحي. فيما يلي وظيفة بسيطة تحذف إحدى الرسائل:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n\n  $scope.deleteEmail = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(index)</span> </span>{\n    $scope.emails.messages.splice(index, <span class=\"hljs-number\">1</span>)\n  };\n\n}]);</pre><p>نصيحة من محترف: من الهم أن تفكر في حذف البيانات من النموذج، لا تحذف العناصر أو أي شيئ من الصفحة، دع Angular يتولى هذا بربطه ثنائي الجانب للبيانات، فقط فكر بذكاء واكتب نصاً يستجيب لبياناتك!</p>\n<p>ربط الوظائف مع طريقة العرض يمر عبر المُرشدات، هذه المرة نستخدم مُرشد <code dir='ltr'>ng-click</code>:</p>\n<pre lang='en'>&lt;a ng-click=<span class=\"hljs-string\">&quot;deleteEmail($index)&quot;</span>&gt;Delete email&lt;<span class=\"hljs-regexp\">/a&gt;</span></pre><p>هذا يختلف تمامًا عن مستقبلات النقر التقليدية في JavaScript، لأسباب عديدة نشرحها لاحقاً.\nلاحظ أنني أيضًا أمرر فهرس العنصر <code dir='ltr'>$index</code>، إذ يعرف Angualr ما العنصر المُراد حذفه (كم يوفر هذا من العناء!؟)</p>\n<p>الناتج (احذف بعض الرسائل):</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/BgZmt/light/\">رابط المثال</a></p>\n<h3 id=\"-dom-\">طرائق DOM التصريحية</h3>\n<p>ننتقل الآن لطرائق DOM، وهي أيضًا مُرشدات تؤدي وظيفة ضمن الصفحة بدونها كنا سنكتب الكثير من النص البرمجي. إحدى الأمثلة المناسبة لإيضاح الفكرة هنا هي إظهار أو إخفاء قسم التنقل ضمن الصفحة باستخدام <code dir='ltr'>ng-show</code> و<code dir='ltr'>ng-click</code>، لنرَ بساطة هذا:</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">a</span> <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-value\">&quot;&quot;</span> <span class=\"hljs-attribute\">ng-click</span>=<span class=\"hljs-value\">&quot;toggle = !toggle&quot;</span>&gt;</span>Toggle nav<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">a</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">ul</span> <span class=\"hljs-attribute\">ng-show</span>=<span class=\"hljs-value\">&quot;toggle&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span>Link 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span>Link 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span>&gt;</span>Link 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">ul</span>&gt;</span></pre><p>هنا ندخل عالم MVVM (اختصار Model-View-View-Model)، لاحظ أننا لم نستخدم متحكماً، وسنشرح فكرة MVVM بعد قليل.</p>\n<p>الناتج (جرب الإظهار والإخفاء):</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/ZUyW5/light/\">رابط المثال</a></p>\n<h3 id=\"-expressions-\">التعبيرات (Expressions)</h3>\n<p>من أفضل ما يقدمه Angular، يقدم بديلاً عن الحاجة لكتابة الكثير من JavaScript والنصوص المكررة.</p>\n<p>هل قمت يوماً بكتابة شيء كهذا؟</p>\n<pre lang='en'>elem.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(data)</span> </span>{\n  <span class=\"hljs-keyword\">if</span> (data.length === <span class=\"hljs-number\">0</span>) {\n    otherElem.innerHTML = <span class=\"hljs-string\">&apos;No data&apos;</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    otherElem.innerHTML = <span class=\"hljs-string\">&apos;My data&apos;</span>;\n  }\n};</pre><p>ربما يكون هذا استدعاءً راجعًا عن طلب GET، ونحتاج لنغير محتوى في الصفحة بناء على البيانات، يقدم Angular هذا بدون الحاجة لكتابة حرف JavaScript!</p>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">p</span>&gt;</span>{{ data.length &gt; 0 &amp;&amp; &apos;My data&apos; || &apos;No data&apos; }}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">p</span>&gt;</span></pre><p>سيقوم هذا بتحديث الصفحة تلقائياً دون استدعاءات عند وصول البيانات أو ما شابه. إن لم تتوفر البيانات، سيظهر هذا واضحاً، وإن وجدت فسيظهر كذلك. هناك حالات كثيرة جدًا يممكن فيها لـAngular أن يتولاها عبر ربطه ثنائي الجانب للبيانات الذي يعمل كالسحر!</p>\n<p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/XCwcr/light/\">رابط المثال</a></p>\n<h3 id=\"-routing-\">طرق العرض الديناميكية والتوجيه (Routing)</h3>\n<p>هي ما تقوم عليه فلسفة تطبيقات الويب (والمواقع) أحادية الصفحة: لديك قسم الترويسة وقسم التذييل وشريط جانبي ثم المحتوى الذي يُحدث تلقائياً بناءً على الرابط الحالي.</p>\n<p>يجعل Angular إعداد هذا في منتهى السهولة. تحقن طرق العرض الديناميكة طرقاً معينة بناء على الرابط، عبر استخدام <code dir='ltr'>$routeProvider</code>. فيما يلي إعداد بسيط:</p>\n<pre lang='en'>myApp.config([<span class=\"hljs-string\">&apos;$routeProvider&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($routeProvider)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"ltr\">/**\n   * $routeProvider\n   */</span>\n  $routeProvider\n  .when(<span class=\"hljs-string\">&apos;/&apos;</span>, {\n    templateUrl: <span class=\"hljs-string\">&apos;views/main.html&apos;</span>\n  })\n  .otherwise({\n    redirectTo: <span class=\"hljs-string\">&apos;/&apos;</span>\n  });\n\n}]);</pre><p>لاحظ أنه عندما (<code dir='ltr'>when</code>) يكون الرابط <code dir='ltr'>/</code> فقط (الصفحة الرئيسية)، ستعرض الصفحة <code dir='ltr'>main.html</code>. من المفيد تسمية طريقة العرض الأساسية <code dir='ltr'>main.html</code> وليس <code dir='ltr'>index.html</code> لأنه سيكون لدينا مسبقاً الصفحة <code dir='ltr'>index.html</code> وهي الصفحة التي تحوي طرق العرض الديناميكية وبقية الأجزاء.\nيمكن ببساطة إضافة المزيد من طرق العرض:</p>\n<pre lang='en'>myApp.config([<span class=\"hljs-string\">&apos;$routeProvider&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($routeProvider)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"ltr\">/**\n   * $routeProvider\n   */</span>\n  $routeProvider\n  .when(<span class=\"hljs-string\">&apos;/&apos;</span>, {\n    templateUrl: <span class=\"hljs-string\">&apos;views/main.html&apos;</span>\n  })\n  .when(<span class=\"hljs-string\">&apos;/emails&apos;</span>, {\n    templateUrl: <span class=\"hljs-string\">&apos;views/emails.html&apos;</span>\n  })\n  .otherwise({\n    redirectTo: <span class=\"hljs-string\">&apos;/&apos;</span>\n  });\n\n}]);</pre><p>بإمكاننا الآن تحميل الصفحة <code dir='ltr'>emails.html</code> ببساطة لتقوم بعرض قائمة الرسائل الإلكترونية. الخلاصة أننا استطعنا أن نبني تطبيقاً معقداً للغاية بجهد ضئيل جداً.\nتوفر الخدمة <code dir='ltr'>$routerProvider</code> المزيد من الخيارات، لكن ما تعلمناه عنها كافٍ في البداية. هناك أيضاً أشياء مثل مُعترِضات <code dir='ltr'>$http</code> التي تبدأ أحداثاً خلال مسير طلب AJAX، فتتيح لنا عرض مقدار التقدم على سبيل المثال أثناء جلب البيانات.</p>\n<h3 id=\"-\">البيانات الثابتة العامة</h3>\n<p>في تطبيق Gmail للويب، تُكتب بيانات كثيرة بصيغة JSON ضمن الصفحة (انقر باليمين واختر عرض المصدر في صفحة Gmail). إن قمنا بخطوة مشابهة، أي كتابة البيانات ضمن الصفحة، فهذا سيجعل وقت عرضها أقل وسيبدو التطبيق أكثر سرعة.</p>\n<p>عندما أطور تطبيقات مؤسستنا، تُدرج وسوم Java ضمن الصفحة وعندما تُعرض، تُرسل البيانات من الخادم (لا خبرة لدي في Java لذا سأكتب فيما يلي تصريحات وهمية، يمكنك استخدام أي لغة على الخادم إن أحببت). النصوص التالية توضح كيف يمكنك كتابة JSON ضمن الصفحة ثم تمريرها إلى المتحكم لربطها مباشرة:</p>\n<pre lang='en'><span class=\"hljs-comment\" dir=\"rtl\" lang=\"ar\">&lt;!-- &#x636;&#x645;&#x646; index.html (&#x641;&#x64A; &#x646;&#x647;&#x627;&#x64A;&#x629; &#x627;&#x644;&#x635;&#x641;&#x62D;&#x629; &#x628;&#x627;&#x644;&#x637;&#x628;&#x639;) --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-built_in\">window</span>.globalData = {};\nglobalData.emails = <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">javaTagHereToGenerateMessages</span>&gt;</span>;</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">script</span>&gt;</span></pre><p>سيُنشئ وسم Java الذي اختلقته البينات بينما سيعالج Angular الرسائل فوراً. كل ما عليك هو إعطاؤه البيانات عبر المتحكم:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;EmailsCtrl&apos;</span>, [<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope)</span> </span>{\n\n    $scope.emails = {};\n\n    <span class=\"hljs-comment\" dir=\"ltr\">// Assign the initial data!</span>\n    $scope.emails.messages = globalData.emails;\n\n}]);</pre><h3 id=\"-minification-\">تقليص الملفات (Minification)</h3>\n<p>سنتحدث قليلاً عن تقليص حجم النصوص البرمجية التي كتبناها. ربما تكون قد جربت تقليص نصوصك البرمجية التي كتبتها لـAngular وصادفت خطأ.\nليس هناك أمور خاصة يتطلبها تقليص حجم هذه الملفات، باستثناء الحاجة لإدراج أسماء المتطلبات ضمن مصفوفة قبل الطريقة المُصرّح عنها، لنوضح أكثر:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>,\n[<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-string\">&apos;Dependency&apos;</span>, <span class=\"hljs-string\">&apos;Service&apos;</span>, <span class=\"hljs-string\">&apos;Factory&apos;</span>,\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">($scope, Dependency, Service, Factory)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"ltr\">// code</span>\n\n}]);</pre><p>بعد التقليص:</p>\n<pre lang='en'>myApp.controller(<span class=\"hljs-string\">&apos;MainCtrl&apos;</span>,\n[<span class=\"hljs-string\">&apos;$scope&apos;</span>, <span class=\"hljs-string\">&apos;Dependency&apos;</span>, <span class=\"hljs-string\">&apos;Service&apos;</span>, <span class=\"hljs-string\">&apos;Factory&apos;</span>,\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(a,b,c,d)</span> </span>{\n\n  <span class=\"hljs-comment\" dir=\"ltr\">// a = $scope</span>\n  <span class=\"hljs-comment\" dir=\"ltr\">// b = Dependency</span>\n  <span class=\"hljs-comment\" dir=\"ltr\">// c = Service</span>\n  <span class=\"hljs-comment\" dir=\"ltr\">// d = Factory</span>\n\n  <span class=\"hljs-comment\" dir=\"ltr\">// $scope alias usage</span>\n  a.someFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{...};\n\n}]);</pre><p>عليك أن تحافظ على ترتيب المتطلبات المحقونة في المصفوفة <code dir='ltr'>[&#39;_one&#39;, &#39;_two&#39;]</code> وضمن مُعاملات الطريقة <code dir='ltr'>function(_one, _two)</code>، وإلا ستسبب لنفسك ولفريق العمل معك مشاكل كثيرة!</p>\n<h3 id=\"-mvc-mvvm\">الاختلافات بين MVC وMVVM</h3>\n<p>سننهي مقالتنا العملاقة الآن بشرح سريع يشمل الفروق بين MVC وMVVM:</p>\n<ul>\n<li><p>MVC: التواصل يعتمد على المتحكم (Controller)، لذلك نقول Model-View-Controller</p>\n</li>\n<li><p>MVVM: يشمل ربط البيانات التصريحي الذي يتواصل، بالمفهوم التقني، مع نفسه؛ أي Model-View-View-Model. يتواصل النموذج مع طريقة العرض، وتتواصل هذه الأخيرة مع النموذج ثانية. يسمح هذا للبيانات بأن تبقى محدّثة على الجانبين دون الحاجة لفعل أي شيء. لا داعي هنا للمتحكم.\nمثال على هذا: إنشاء حلقة <code dir='ltr'>ng-repeat</code> دون أن نعتمد على بيانات يُرسلها متحكم:</p>\n</li>\n</ul>\n<pre lang='en'><span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">li</span> <span class=\"hljs-attribute\">ng-repeat</span>=<span class=\"hljs-value\">&quot;number in [1,2,3,4,5,6,7,8,9]&quot;</span>&gt;</span>\n  {{ number }}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">li</span>&gt;</span></pre><p>يبدو هذا مناسباً للتجارب السريعة، ولكنني أنصح دوماً باستخدام متحكم للحفاظ على تنظيم النص البرمجي.</p>\n<p>الناتج:</p>\n<p><a href=\"http://jsfiddle.net/toddmotto/C9GHF/light/\">رابط المثال</a></p>\n<h3 id=\"-html5\">مكونات الويب في HTML5</h3>\n<p>قد تبدو هذه الفكرة مكررة، ولكنني سأعيدها هنا لنتحدث عن مكونات الويب.\nيسمح Angular بإنشاء عناصر (elements) مخصصة مثل: <code dir='ltr'>&lt;myCustomElement&gt;&lt;/myCustomElement&gt;</code></p>\n<p>في الحقيقة هذا أشبه ما يكون بمستقبل HTML5 التي تقدم فكرة جديدة تُسمى مكونّات الويب (Web Components)، والتي تتركب من عناصر مخصصة ضمن HTML مترافقة مع نص JavaScript ديناميكي، وهذا أمر مثيرٌ للغاية - والأكثر إثارة أنه ممكن اليوم باستخدام Angular! فريق Angular بعيد النظر - شكراً لكم!</p>\n<h3 id=\"-scope-\">تعليقات المجال (Scope)</h3>\n<p>أعتقد أن تعليقات المجال إضافة جميلة لسياق العمل، فبدل الحاجة لكتابة التعليقات ضمن HTML بالطريقة التالية:</p>\n<pre lang='en'><span class=\"hljs-comment\" dir=\"ltr\">&lt;!-- header --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">header</span>&gt;</span>\n  Stuff.\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">header</span>&gt;</span>\n<span class=\"hljs-comment\" dir=\"ltr\">&lt;!-- /header --&gt;</span></pre><p>أصبحنا نتحدث عن طرق العرض والمجالات بدل الصفحة، البيانات ضمن مجال ما لا تُشارك مع مجالات أخرى إلا إن قمت بفعل ذلك عن عمدٍ. لنستغل هذا في تحسين كتابة النص البرمجي بتقسيمه إلى مناطق تسبقها تعليقات:</p>\n<pre lang='en'><span class=\"hljs-comment\" dir=\"ltr\">&lt;!-- scope: MainCtrl --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-title\">div</span> <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-value\">&quot;content&quot;</span> <span class=\"hljs-attribute\">ng-controller</span>=<span class=\"hljs-value\">&quot;MainCtrl&quot;</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-title\">div</span>&gt;</span>\n<span class=\"hljs-comment\" dir=\"ltr\">&lt;!-- /scope: MainCtrl --&gt;</span></pre><h3 id=\"-angular\">تصحيح العلل في Angular</h3>\n<p>تتوفر إضافة جميلة للغاية لمتصفح Chrome ينصح بها فريق Angular، وتسمى <a href=\"https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en\">Batarang</a>.</p>\n<p>برمجة سعيدة!</p>\n","title":"الدليل الكامل لتعلم Angular JS في يوم واحد","filename":"angular-guide.json","id":"angular-guide","date":"2014-03-29T00:00:00.000Z","image":"content/images/AngularJS-medium.png","description":"هذه ترجمة (بتصرف) لمقالة Todd Motto على مدوّنته وإليه يعود ضمير المتكلم في المقالة. نُشرت للمرة الأولى على مدوّنة دروس الويب، وأعيدُ نشرها هنا.","images":1,"videos":0,"tracks":0,"links":15,"type":"text"}